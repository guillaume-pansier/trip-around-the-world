{
  "_args": [
    [
      {
        "raw": "ariutta/svg-pan-zoom",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "ariutta/svg-pan-zoom",
        "spec": "github:ariutta/svg-pan-zoom",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:ariutta/svg-pan-zoom.git",
          "sshUrl": "git+ssh://git@github.com/ariutta/svg-pan-zoom.git",
          "httpsUrl": "git+https://github.com/ariutta/svg-pan-zoom.git",
          "gitUrl": "git://github.com/ariutta/svg-pan-zoom.git",
          "shortcut": "github:ariutta/svg-pan-zoom",
          "directUrl": "https://raw.githubusercontent.com/ariutta/svg-pan-zoom/master/package.json"
        }
      },
      "C:\\Users\\Guillaume\\Desktop\\angular2\\ponyracer"
    ]
  ],
  "_from": "ariutta/svg-pan-zoom",
  "_id": "svg-pan-zoom@3.3.0",
  "_inCache": true,
  "_location": "/svg-pan-zoom",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ariutta/svg-pan-zoom",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "ariutta/svg-pan-zoom",
    "spec": "github:ariutta/svg-pan-zoom",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:ariutta/svg-pan-zoom.git",
      "sshUrl": "git+ssh://git@github.com/ariutta/svg-pan-zoom.git",
      "httpsUrl": "git+https://github.com/ariutta/svg-pan-zoom.git",
      "gitUrl": "git://github.com/ariutta/svg-pan-zoom.git",
      "shortcut": "github:ariutta/svg-pan-zoom",
      "directUrl": "https://raw.githubusercontent.com/ariutta/svg-pan-zoom/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git://github.com/ariutta/svg-pan-zoom.git#803d65d0e728502c29dc7c9c5e8145835b152dd1",
  "_shasum": "c96ce17ef63e3ac14fdec1e511b311ea50597806",
  "_shrinkwrap": null,
  "_spec": "ariutta/svg-pan-zoom",
  "_where": "C:\\Users\\Guillaume\\Desktop\\angular2\\ponyracer",
  "browser": "src/browserify.js",
  "bugs": {
    "url": "https://github.com/ariutta/svg-pan-zoom/issues"
  },
  "contributors": [
    {
      "name": "Andrea Leofreddi",
      "email": "a.leofreddi@itcharm.com"
    },
    {
      "name": "Anders Riutta",
      "email": "git@andersriutta.com"
    },
    {
      "name": "Zeng Xiaohui"
    },
    {
      "name": "Barry Coughlan",
      "url": "https://github.com/bcoughlan"
    },
    {
      "name": "Risingson"
    },
    {
      "name": "bumbu alex",
      "url": "http://bumbu.me>"
    },
    {
      "name": "Alexander Pico",
      "email": "apico@gladstone.ucsf.edu"
    },
    {
      "name": "Kyran Burraston",
      "url": "http://kyranburraston.co.uk"
    },
    {
      "name": "Risingson",
      "url": "https://github.com/Risingson"
    },
    {
      "name": "Siddhanathan Shanmugam",
      "email": "siddhanathan+social@gmail.com"
    },
    {
      "name": "Karina Simard",
      "url": "https://github.com/ksimard"
    },
    {
      "name": "Christopher Clark",
      "email": "chris.clark@sparkfun.com"
    },
    {
      "name": "Vladimir Prus",
      "url": "http://vladimirprus.com"
    },
    {
      "name": "Barry Coughlan",
      "url": "https://github.com/bcoughlan"
    },
    {
      "name": "Ionică Bizău",
      "url": "http://ionicabizau.net/"
    },
    {
      "name": "Ciprian Placintă",
      "url": "https://github.com/CiprianPlacinta"
    },
    {
      "name": "Riccardo Santoro",
      "url": "https://github.com/VeNoMiS"
    }
  ],
  "dependencies": {},
  "description": "JavaScript library for panning and zooming an SVG image from the mouse, touches and programmatically.",
  "devDependencies": {
    "browserify": "^8.0.3",
    "gulp": "^3.8.10",
    "gulp-concat": "^2.4.3",
    "gulp-config-sync": "git://github.com/bumbu/gulp-config-sync.git",
    "gulp-header": "^1.2.2",
    "gulp-jscs": "^1.4.0",
    "gulp-jshint": "^1.9.0",
    "gulp-plumber": "^0.6.6",
    "gulp-qunit": "^1.1.0",
    "gulp-rename": "^1.2.0",
    "gulp-uglify": "^1.0.2",
    "gulp-watch": "^3.0.0",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.0.0"
  },
  "gitHead": "803d65d0e728502c29dc7c9c5e8145835b152dd1",
  "homepage": "https://github.com/ariutta/svg-pan-zoom#readme",
  "keywords": [
    "svg",
    "pan",
    "zoom"
  ],
  "license": "BSD-2-Clause",
  "main": "dist/svg-pan-zoom.js",
  "name": "svg-pan-zoom",
  "optionalDependencies": {},
  "readme": "![svg-pan-zoom logo](http://ariutta.github.io/svg-pan-zoom/svg-pan-zoom-logo.png)\r\n\r\nsvg-pan-zoom library\r\n==========================\r\n\r\nSimple pan/zoom solution for SVGs in HTML. It adds events listeners for mouse scroll, double-click and pan, plus it optionally offers:\r\n* JavaScript API for control of pan and zoom behavior\r\n* onPan and onZoom event handlers\r\n* On-screen zoom controls\r\n\r\nIt works cross-browser and supports both inline SVGs and SVGs in HTML `object` or `embed` elements.\r\n\r\n> If you're looking for version 2.3.x you can find it in [v2.3.x branch](https://github.com/ariutta/svg-pan-zoom/tree/v2.3.x)\r\n\r\nSupport\r\n-------\r\n\r\n### Bugs and Issues\r\n\r\nIf you found a bug or have a suggestion first check if there is a similar [open](https://github.com/ariutta/svg-pan-zoom/issues) or [closed](https://github.com/ariutta/svg-pan-zoom/issues?q=is%3Aissue+is%3Aclosed) issue. If there are none then create a new one.\r\n\r\nWhen opening a new issue **please provide a reproducible example**:\r\n- Share it so we can get directly to the problem. You can use [this starter jsfiddle setup](http://jsfiddle.net/bumbu/167usffr/) to provide your example. Or upload your own [jsfiddle.net](http://jsfiddle.net) (or any other live) example.\r\n- Mention your library version (located in library file in header)\r\n- Mention your browser name, version and operating system\r\n- Mention any other important for debug details\r\n\r\n### Solved Bugs and Implemented Features\r\n\r\nIf you solved a bug or implemented a feature that may be useful for others then you're welcome to create a pull request.\r\n\r\n### Questions, How To's, Need Help\r\n\r\nIf you have any other type of questions, problems, your code is not working or you want to critique the library - you can use StackOverflow. Just tag your question with [`svgpanzoom`](http://stackoverflow.com/questions/tagged/svgpanzoom).\r\n\r\n### Contributions/Pull Requests\r\n\r\nBest way to contribute is to create a pull request. In order to create a pull request:\r\n* Fork this repository\r\n* Clone repository fork (created in previous step) locally (on your machine)\r\n* Ensure that you have nodejs and npm installed locally\r\n* In console:\r\n  * `cd` into project folder\r\n  * Run `npm install`\r\n  * Run `npm install -g gulp` if you don't have it already installed globally\r\n  * Running `gulp` will listen for source files changes (in `src` folder) and will automatically build distribution files\r\n  * Running `gulp browserify` will compile source files\r\n  * Running `gulp check` for some syntax errors\r\n  * Running `gulp test` will run tests\r\n  * Running `gulp build` will prepare the project for a new release\r\n* Implement the change using `gulp` or `gulp browserify`\r\n* After change is done test it with `gulp check` and `gulp test`\r\n* Commit only meaningful changes. **Do not commit distribution files (`dist` folder)**. Distribution files are built only before a release\r\n* Push your changes into your fork\r\n* Create a pull request\r\n\r\nDemos\r\n-----\r\nPan and zoom the SVG tiger on github pages:\r\n* [Single Inline SVG](http://ariutta.github.io/svg-pan-zoom/demo/inline.html)\r\n* [Multiple Inline SVGs](http://ariutta.github.io/svg-pan-zoom/demo/multi-instance.html)\r\n* [SVG Inserted with `Embed` Element](http://ariutta.github.io/svg-pan-zoom/demo/embed.html)\r\n* [SVG Inserted with `Object` Element](http://ariutta.github.io/svg-pan-zoom/demo/object.html)\r\n* [SVG Inserted with `Img` Element](http://ariutta.github.io/svg-pan-zoom/demo/img.html) (These cannot be panned/zoomed.)\r\n* [SVG With custom controls](http://ariutta.github.io/svg-pan-zoom/demo/custom-controls.html)\r\n* [Resize SVG container on document resize](http://ariutta.github.io/svg-pan-zoom/demo/resize.html)\r\n* [Two SVGs with synchronized zooming and panning](http://ariutta.github.io/svg-pan-zoom/demo/sinchronized.html)\r\n* [Custom events: Touch events support: pan, double tap, pinch](http://ariutta.github.io/svg-pan-zoom/demo/mobile.html)\r\n* [Custom events: Enable zooming only on click, disable on mouse out](http://ariutta.github.io/svg-pan-zoom/demo/custom-event-handlers.html)\r\n* [Limit pan](http://ariutta.github.io/svg-pan-zoom/demo/limit-pan.html)\r\n* [Dynamic SVG load](http://ariutta.github.io/svg-pan-zoom/demo/dynamic-load.html)\r\n* [Using Require.js](http://ariutta.github.io/svg-pan-zoom/demo/require.html)\r\n* [Pan animation](http://ariutta.github.io/svg-pan-zoom/demo/simple-animation.html)\r\n* [Zooming just one SVG layer](http://ariutta.github.io/svg-pan-zoom/demo/layers.html)\r\n* [Thumbnail Viewer](http://ariutta.github.io/svg-pan-zoom/demo/thumbnailViewer.html)\r\n\r\nHow To Use\r\n----------\r\n\r\nReference the [svg-pan-zoom.js file](http://ariutta.github.io/svg-pan-zoom/dist/svg-pan-zoom.min.js) from your HTML document. Then call the init method:\r\n\r\n```js\r\nvar panZoomTiger = svgPanZoom('#demo-tiger');\r\n// or\r\nvar svgElement = document.querySelector('#demo-tiger')\r\nvar panZoomTiger = svgPanZoom(svgElement)\r\n```\r\n\r\nFirst argument to function should be a CSS selector of SVG element or a DOM Element.\r\n\r\nIf you want to override the defaults, you can optionally specify one or more arguments:\r\n\r\n```js\r\nsvgPanZoom('#demo-tiger', {\r\n  viewportSelector: '.svg-pan-zoom_viewport'\r\n, panEnabled: true\r\n, controlIconsEnabled: false\r\n, zoomEnabled: true\r\n, dblClickZoomEnabled: true\r\n, mouseWheelZoomEnabled: true\r\n, preventMouseEventsDefault: true\r\n, zoomScaleSensitivity: 0.2\r\n, minZoom: 0.5\r\n, maxZoom: 10\r\n, fit: true\r\n, contain: false\r\n, center: true\r\n, refreshRate: 'auto'\r\n, beforeZoom: function(){}\r\n, onZoom: function(){}\r\n, beforePan: function(){}\r\n, onPan: function(){}\r\n, customEventsHandler: {}\r\n, eventsListenerElement: null\r\n});\r\n```\r\n\r\nIf any arguments are specified, they must have the following value types:\r\n* 'viewportSelector' can be querySelector string or SVGElement.\r\n* 'panEnabled' must be true or false. Default is true.\r\n* 'controlIconsEnabled' must be true or false. Default is false.\r\n* 'zoomEnabled' must be true or false. Default is true.\r\n* 'dblClickZoomEnabled' must be true or false. Default is true.\r\n* 'mouseWheelZoomEnabled' must be true or false. Default is true.\r\n* 'preventMouseEventsDefault' must be true or false. Default is true.\r\n* 'zoomScaleSensitivity' must be a scalar. Default is 0.2.\r\n* 'minZoom' must be a scalar. Default is 0.5.\r\n* 'maxZoom' must be a scalar. Default is 10.\r\n* 'fit' must be true or false. Default is true.\r\n* 'contain' must be true or false. Default is false.\r\n* 'center' must be true or false. Default is true.\r\n* 'refreshRate' must be a number or 'auto'\r\n* 'beforeZoom' must be a callback function to be called before zoom changes.\r\n* 'onZoom' must be a callback function to be called when zoom changes.\r\n* 'beforePan' must be a callback function to be called before pan changes.\r\n* 'onPan' must be a callback function to be called when pan changes.\r\n* 'customEventsHandler' must be an object with `init` and `destroy` arguments as functions.\r\n* 'eventsListenerElement' must be an SVGElement or null.\r\n\r\n`beforeZoom` will be called with 2 float attributes: oldZoom and newZoom.\r\nIf `beforeZoom` will return `false` then zooming will be halted.\r\n\r\n`onZoom` callbacks will be called with one float attribute representing new zoom scale.\r\n\r\n`beforePan` will be called with 2 attributes:\r\n* `oldPan`\r\n* `newPan`\r\n\r\nEach of these objects has two attributes (x and y) representing current pan (on X and Y axes).\r\n\r\nIf `beforePan` will return `false` or an object `{x: true, y: true}` then panning will be halted.\r\nIf you want to prevent panning only on one axis then return an object of type `{x: true, y: false}`.\r\nYou can alter panning on X and Y axes by providing alternative values through return `{x: 10, y: 20}`.\r\n\r\n> *Caution!* If you alter panning by returning custom values `{x: 10, y: 20}` it will update only current pan step. If panning is done by mouse/touch you have to take in account that next pan step (after the one that you altered) will be performed with values that do not consider altered values (as they even did not existed).\r\n\r\n`onPan` callback will be called with one attribute: `newPan`.\r\n\r\n> *Caution!* Calling zoom or pan API methods form inside of `beforeZoom`, `onZoom`, `beforePan` and `onPan` callbacks may lead to infinite loop.\r\n\r\n`panEnabled` and `zoomEnabled` are related only to user interaction. If any of this options are disabled - you still can zoom and pan via API.\r\n\r\n`fit` takes precedence over `contain`. So if you set `fit: true` then `contain`'s value doesn't matter.\r\n\r\nEmbedding remote files\r\n---------------------\r\n\r\nIf you're embedding a remote file like this\r\n```html\r\n<embed type=\"image/svg+xml\" src=\"/path/to/my/file.svg\" />\r\n<object type=\"image/svg+xml\" data=\"/path/to/my/file.svg\">Your browser does not support SVG</object>\r\n```\r\n\r\nor you're rendering the SVG after the page loads then you'll have to call svgPanZoom library after your SVG is loaded.\r\n\r\nOne way to do so is by listening to load event:\r\n```html\r\n<embed type=\"image/svg+xml\" src=\"/path/to/my/file.svg\" id=\"my-embed\"/>\r\n\r\n<script>\r\ndocument.getElementById('my-embed').addEventListener('load', function(){\r\n  // Will get called after embed element was loaded\r\n  svgPanZoom(document.getElementById('my-embed')); \r\n})\r\n</script>\r\n```\r\n\r\n\r\nUsing a custom viewport\r\n-----------------------\r\n\r\nYou may want to use a custom viewport if you have more layers in your SVG but you want to _pan-zoom_ only one of them.\r\n\r\nBy default if:\r\n  * There is just one top-level graphical element of type SVGGElement (`<g>`)\r\n  * SVGGElement has no `transform` attribute\r\n  * There is no other SVGGElement with class name `svg-pan-zoom_viewport`\r\n\r\nthen the top-level graphical element will be used as viewport.\r\n\r\nTo specify which layer (SVGGElement) should be _pan-zoomed_ set the `svg-pan-zoom_viewport` class name to that element:\r\n`<g class=\"svg-pan-zoom_viewport\"></g>`.\r\n\r\n> Do not set any _transform_ attributes to that element. It will make the library misbehave.\r\n> If you need _transform_ attribute for viewport better create a nested group element and set _transforms_ to that element:\r\n```html\r\n<g class=\"svg-pan-zoom_viewport\">\r\n  <g transform=\"matrix(1,0,0,1,0,0);\"></g>\r\n</g>\r\n```\r\n\r\nYou can specify your own viewport selector by altering `viewportSelector` config value:\r\n```js\r\nsvgPanZoom('#demo-tiger', {\r\n  viewportSelector: '.svg-pan-zoom_viewport'\r\n});\r\n// or\r\nvar viewportGroupElement = document.getElemenById('demo-tiger').querySelector('.svg-pan-zoom_viewport');\r\nsvgPanZoom('#demo-tiger', {\r\n  viewportSelector: viewportGroupElement\r\n});\r\n```\r\n\r\nListening for pan/zoom events on a child SVG element\r\n----------------------------------------------------\r\n\r\nIf you want to listen for user interaction events from a child SVG element then use `eventsListenerElement` option. An example is available in [demo/layers.html](http://ariutta.github.io/svg-pan-zoom/demo/layers.html).\r\n\r\nUse with browserify\r\n-------------------\r\n\r\nTo use with browserify, follow these steps:\r\n* Add the package as node module `npm install --save ariutta/svg-pan-zoom`\r\n* Require _svg-pan-zoom_ in your source file `svgPanZoom = require('svg-pan-zoom')`\r\n* Use in the same way as you would do with global svgPanZoom: `instance = svgPanZoom('#demo-tiger')`\r\n\r\nUse with Require.js (or other AMD libraries)\r\n-------------------\r\n\r\nAn example of how to load library using Require.js is available in [demo/require.html](http://ariutta.github.io/svg-pan-zoom/demo/require.html)\r\n\r\nCustom events support\r\n---------------------\r\n\r\nYou may want to add custom events support (for example double tap or pinch).\r\n\r\nIt is possible by setting `customEventsHandler` configuration option.\r\n`customEventsHandler` should be an object with following attributes:\r\n* `haltEventListeners`: array of strings\r\n* `init`: function\r\n* `destroy`: function\r\n\r\n`haltEventListeners` specifies which default event listeners should be disabled (in order to avoid conflicts as svg-pan-zoom by default supports panning using touch events).\r\n\r\n`init` is a function that is called when svg-pan-zoom is initialized. An object is passed into this function.\r\nPassed object has following attributes:\r\n* `svgElement` - SVGSVGElement\r\n* `instance` - svg-pan-zoom public API instance\r\n\r\n`destroy` is a function called upon svg-pan-zoom destroy\r\n\r\nAn example of how to use it together with [Hammer.js](http://hammerjs.github.io):\r\n```js\r\nvar options = {\r\n  zoomEnabled: true\r\n, controlIconsEnabled: true\r\n, customEventsHandler: {\r\n    // Halt all touch events\r\n    haltEventListeners: ['touchstart', 'touchend', 'touchmove', 'touchleave', 'touchcancel']\r\n\r\n    // Init custom events handler\r\n  , init: function(options) {\r\n      // Init Hammer\r\n      this.hammer = Hammer(options.svgElement)\r\n\r\n      // Handle double tap\r\n      this.hammer.on('doubletap', function(ev){\r\n        options.instance.zoomIn()\r\n      })\r\n    }\r\n\r\n    // Destroy custom events handler\r\n  , destroy: function(){\r\n      this.hammer.destroy()\r\n    }\r\n  }\r\n}\r\n\r\nsvgPanZoom('#mobile-svg', options);\r\n```\r\n\r\nYou may find an example that adds support for Hammer.js pan, pinch and doubletap in demo/mobile.html\r\n\r\nKeep content visible/Limit pan\r\n------------------------------\r\n\r\nYou may want to keep SVG content visible by not allowing panning over SVG borders.\r\n\r\nTo do so you may prevent or alter panning from `beforePan` callback. For more details take a look at `demo/limit-pan.html` example.\r\n\r\nPublic API\r\n----------\r\n\r\nWhen you call `svgPanZoom` method it returns an object with following methods:\r\n* enablePan\r\n* disablePan\r\n* isPanEnabled\r\n* pan\r\n* panBy\r\n* getPan\r\n* setBeforePan\r\n* setOnPan\r\n* enableZoom\r\n* disableZoom\r\n* isZoomEnabled\r\n* enableControlIcons\r\n* disableControlIcons\r\n* isControlIconsEnabled\r\n* enableDblClickZoom\r\n* disableDblClickZoom\r\n* isDblClickZoomEnabled\r\n* enableMouseWheelZoom\r\n* disableMouseWheelZoom\r\n* isMouseWheelZoomEnabled\r\n* setZoomScaleSensitivity\r\n* setMinZoom\r\n* setMaxZoom\r\n* setBeforeZoom\r\n* setOnZoom\r\n* zoom\r\n* zoomBy\r\n* zoomAtPoint\r\n* zoomAtPointBy\r\n* zoomIn\r\n* zoomOut\r\n* getZoom\r\n* resetZoom\r\n* resetPan\r\n* reset\r\n* fit\r\n* contain\r\n* center\r\n* updateBBox\r\n* resize\r\n* getSizes\r\n* destroy\r\n\r\nTo programmatically pan, call the pan method with vector as first argument:\r\n\r\n```js\r\n// Get instance\r\nvar panZoomTiger = svgPanZoom('#demo-tiger');\r\n\r\n// Pan to rendered point x = 50, y = 50\r\npanZoomTiger.pan({x: 50, y: 50})\r\n\r\n// Pan by x = 50, y = 50 of rendered pixels\r\npanZoomTiger.panBy({x: 50, y: 50})\r\n```\r\n\r\nTo programmatically zoom, you can use the zoom method to specify your desired scale value:\r\n\r\n```js\r\n// Get instance\r\nvar panZoomTiger = svgPanZoom('#demo-tiger');\r\n\r\n// Set zoom level to 2\r\npanZoomTiger.zoom(2)\r\n\r\n// Zoom by 130%\r\npanZoomTiger.zoomBy(1.3)\r\n\r\n// Set zoom level to 2 at point\r\npanZoomTiger.zoomAtPoint(2, {x: 50, y: 50})\r\n\r\n// Zoom by 130% at given point\r\npanZoomTiger.zoomAtPointBy(1.3, {x: 50, y: 50})\r\n```\r\n\r\n> Zoom is relative to initial SVG internal zoom level. If your SVG was fit at the beginning (option `fit: true`) and thus zoomed in or out to fit available space - initial scale will be 1 anyway.\r\n\r\nOr you can use the zoomIn or zoomOut methods:\r\n\r\n```js\r\n// Get instance\r\nvar panZoomTiger = svgPanZoom('#demo-tiger');\r\n\r\npanZoomTiger.zoomIn()\r\npanZoomTiger.zoomOut()\r\npanZoomTiger.resetZoom()\r\n```\r\n\r\nIf you want faster or slower zooming, you can override the default zoom increment with the setZoomScaleSensitivity method.\r\n\r\nTo programmatically enable/disable pan or zoom:\r\n\r\n```js\r\n// Get instance\r\nvar panZoomTiger = svgPanZoom('#demo-tiger');\r\n\r\npanZoomTiger.enablePan();\r\npanZoomTiger.disablePan();\r\n\r\npanZoomTiger.enableZoom();\r\npanZoomTiger.disableZoom();\r\n```\r\n\r\nTo fit and center (you may try `contain` instead of `fit`):\r\n\r\n```js\r\n// Get instance\r\nvar panZoomTiger = svgPanZoom('#demo-tiger');\r\n\r\npanZoomTiger.fit();\r\npanZoomTiger.center();\r\n```\r\n\r\nIf you want to fit and center your SVG after its container resize:\r\n\r\n```js\r\n// Get instance\r\nvar panZoomTiger = svgPanZoom('#demo-tiger');\r\n\r\npanZoomTiger.resize(); // update SVG cached size and controls positions\r\npanZoomTiger.fit();\r\npanZoomTiger.center();\r\n```\r\n\r\nIf you update SVG (viewport) contents so its border box (virtual box that contains all elements) changes, you have to call `updateBBox`:\r\n\r\n```js\r\nvar panZoomTiger = svgPanZoom('#demo-tiger');\r\npanZoomTiger.fit();\r\n\r\n// Update SVG rectangle width\r\ndocument.getElementById('demo-tiger').querySelector('rect').setAttribute('width', 200)\r\n\r\n// fit does not work right anymore as viewport bounding box changed\r\npanZoomTiger.fit();\r\n\r\npanZoomTiger.updateBBox(); // Update viewport bounding box\r\npanZoomTiger.fit(); // fit works as expected\r\n```\r\n\r\nIf you need more data about SVG you can call `getSizes`. It will return an object that will contain:\r\n* `width` - SVG cached width\r\n* `height` - SVG cached height\r\n* `realZoom` - _a_ and _d_ attributes of transform matrix applied over viewport\r\n* `viewBox` - an object containing cached sizes of viewport boxder box\r\n  * `width`\r\n  * `height`\r\n  * `x` - x offset\r\n  * `y` - y offset\r\n\r\nDestroy SvgPanZoom instance:\r\n\r\n```js\r\n// Get instance\r\nvar panZoomTiger = svgPanZoom('#demo-tiger');\r\n\r\npanZoomTiger.destroy();\r\ndelete panZoomTiger;\r\n```\r\n\r\nHow to test\r\n-----------\r\n\r\nBefore committing you should check your code style by running `gulp check`.\r\n\r\nIf you made a change then first build the library. Open `./tests/index.html` in your browser. All tests should pass.\r\n\r\nIf you have PhantomJS installed then you can run `gulp test`.\r\n\r\nSupported Browsers\r\n------------------\r\n* Chrome\r\n* Firefox\r\n* Safari\r\n* Opera\r\n* Internet Explorer 9+ _(works badly if viewBox attribute is set)_\r\n\r\nRelated Work\r\n------------\r\nThis library used the [SVGPan](https://github.com/aleofreddi/svgpan) library as a starting point. SVGPan is intended for use with the [SVG 'script' element](http://www.w3.org/TR/SVG/script.html), whereas svg-pan-zoom is intended for use with the [HTML 'script' element](http://www.w3.org/TR/html401/interact/scripts.html).\r\n\r\nLicense\r\n-------\r\nThe code from the SVGPan library is licensed under the following BSD license:\r\n\r\n```\r\nCopyright 2009-2010 Andrea Leofreddi <a.leofreddi@itcharm.com>. All rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without modification, are\r\npermitted provided that the following conditions are met:\r\n\r\n  1. Redistributions of source code must retain the above copyright notice, this list of\r\n     conditions and the following disclaimer.\r\n  2. Redistributions in binary form must reproduce the above copyright notice, this list\r\n     of conditions and the following disclaimer in the documentation and/or other materials\r\n     provided with the distribution.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY Andrea Leofreddi \"AS IS\" AND ANY EXPRESS OR IMPLIED\r\nWARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\nFITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Andrea Leofreddi OR\r\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\r\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\r\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n* The views and conclusions contained in the software and documentation are those of the\r\nauthors and should not be interpreted as representing official policies, either expressed\r\nor implied, of Andrea Leofreddi.\r\n```\r\n\r\nThe code from the updates and changes to SVGPan are licensed under the same BSD license, with the copyright for the code from each change held by the author of that code.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ariutta/svg-pan-zoom.git"
  },
  "scripts": {
    "build": "gulp build",
    "start": "gulp",
    "test": "gulp test"
  },
  "version": "3.3.0"
}
